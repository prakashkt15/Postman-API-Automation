{
	"info": {
		"_postman_id": "4969b716-9a42-4cc2-aa5b-77b9248e5caa",
		"name": "Simple Grocery Store Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27021527"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 5000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/status",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"At least one product exists\", () => { //Test for collection variable to get Fail status if res is null\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array'); //Validate bcs to avoid sending null to variable\r",
									"    pm.expect(response.length).to.be.above(0); //Validate bcs to avoid sending null to variable\r",
									"\r",
									"    const product = response[0];\r",
									"    pm.expect(product).to.be.haveOwnProperty('id'); //validating object contains property id\r",
									"    pm.expect(product.id).to.be.a('number'); //validating id is a number literal \r",
									"    pm.expect(product.inStock).to.be.true;\r",
									"\r",
									"    //pm.collectionVariables.set(\"productId\", response[0].id);\r",
									"    pm.environment.set(\"productId\", response[0].id);\r",
									"}); \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products?category=candy&results=2",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "candy",
									"description": "meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee"
								},
								{
									"key": "available",
									"value": "true",
									"description": "true/false",
									"disabled": true
								},
								{
									"key": "results",
									"value": "2",
									"description": "0 to 20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json(); //declared globally insted of writing in each tests\r",
									"\r",
									"pm.test('Response is an object', () => {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Correct product was retrieved\", () => {\r",
									"    //const requestProductId = pm.collectionVariables.get('productId');\r",
									"    const requestProductId = pm.variables.get('productId');\r",
									"    pm.expect(response.id).to.eql(requestProductId);\r",
									"});\r",
									"\r",
									"pm.test('Product name', () => {\r",
									"    pm.expect(response.name).to.eql('Kinder Joy Eggs'); //hardcode\r",
									"    pm.expect(response.name).to.be.a('String') //instead of hardcode validate with datatypes\r",
									"});\r",
									"\r",
									"pm.test('Product price', () => {\r",
									"    pm.expect(response.price).to.eql(1.05); //hardcode\r",
									"    pm.expect(response.price).to.be.a('number'); //instead of hardcode validate with datatypes\r",
									"    pm.expect(response.price).to.be.above(0); //instead of hardcode validate with datatypes\r",
									"});\r",
									"\r",
									"pm.test('Product is in stock', () => {\r",
									"    //pm.expect(response.inStock).to.eql(false);\r",
									"    pm.expect(response.inStock).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products/:productId?product-label=false",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "product-label",
									"value": "false",
									"description": "true/false"
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid cardId\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('object');\r",
									"\r",
									"    pm.expect(response).to.be.haveOwnProperty(\"cartId\");\r",
									"\r",
									"    pm.expect(response.cartId).to.be.a('String');\r",
									"\r",
									"    //pm.collectionVariables.set('cartId', response.cartId);\r",
									"    // Combination of above 2 lines\r",
									"    // pm.collectionVariables.set('cartId', pm.response.json().cartId); \r",
									"\r",
									"    pm.environment.set('cartId', response.cartId);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/carts",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/carts/:cartId",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/carts/:cartId/items",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Item was created\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.created).to.be.true;\r",
									"    pm.expect(response.itemId).to.be.a('number');\r",
									"    pm.environment.set('lastAddedItemId', response.itemId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/carts/:cartId/items",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an qty in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": {{productId}},\r\n    \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}//carts/:cartId/items/:itemId",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"",
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Order was created\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.created).to.be.true;\r",
									"    pm.expect(response.orderId).to.be.a('String');\r",
									"    //pm.collectionVariables.set('orderId', response.orderId);\r",
									"    pm.environment.set('orderId', response.orderId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{apiToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"John Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/orders",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{apiToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"Updated the Order\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/orders/:orderId",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Created order is in the list using for-ech loop\", () => {\r",
									"    const response = pm.response.json();\r",
									"    let isOrderInResponse = false;\r",
									"    response.forEach((order) => {\r",
									"        if (order.id === pm.variables.get('orderId')) {\r",
									"            console.log(\"Found the Order\");\r",
									"            isOrderInResponse = true;\r",
									"        }\r",
									"    });\r",
									"    pm.expect(isOrderInResponse).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Created order is in the list using for loop\", () => {\r",
									"    const response = pm.response.json();\r",
									"    let isOrderInResponse = false;\r",
									"    for (let i = 0; i < response.length; i++) {\r",
									"        if (response[i].id === pm.variables.get('orderId')) {\r",
									"            console.log(\"Found the Order\");\r",
									"            isOrderInResponse = true;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(isOrderInResponse).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Created order is in the list using find()\", () => {\r",
									"    const response = pm.response.json();\r",
									"    //let order = response.find((order) => order.id === pm.collectionVariables.get('orderId'));\r",
									"    let order = response.find((order) => order.id === pm.variables.get('orderId'));\r",
									"    pm.expect(order).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{apiToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/orders",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{apiToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/orders/:orderId",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Error message contains the deleted order id.', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.haveOwnProperty('error');\r",
									"\r",
									"    //pm.expect(response.error).to.contain(pm.collectionVariables.get('orderId'));\r",
									"    pm.expect(response.error).to.contain(pm.variables.get('orderId'));\r",
									"    pm.expect(response.error).to.include(pm.variables.get('orderId'));\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"productId\");\r",
									"pm.environment.unset(\"cartId\");\r",
									"pm.environment.unset(\"lastAddedItemId\");\r",
									"pm.environment.unset(\"orderId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{apiToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/orders/:orderId",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}",
									"description": "\n"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Authentication",
			"item": [
				{
					"name": "Missing Header",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"John Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{groceryURL}}/orders",
									"host": [
										"{{groceryURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{groceryURL}}/orders",
									"host": [
										"{{groceryURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test('Error message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql('Missing Authorization header.');\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$randomInt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"John Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{groceryURL}}/orders",
									"host": [
										"{{groceryURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{$randomInt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{groceryURL}}/orders",
									"host": [
										"{{groceryURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test('Error message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql('Invalid bearer token.');\r",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "Tested API error handling",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 401 Unauthorized\", () =>{\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Inputs",
			"item": [
				{
					"name": "Get all products - Invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Error message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.be.string(\"Invalid value for query parameter 'category'.\")//use \"\" for string inside string and string instead of eql for the partial search\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products?category=dairyy",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "dairyy"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								},
								{
									"key": "category",
									"value": "eggs",
									"disabled": true
								},
								{
									"key": "results",
									"value": "22",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Max results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Error message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.be.string(\"Invalid value for query parameter 'results'.\")//use \"\" for string inside string and string instead of eql for the partial search\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products?category=dairy&results=200",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "dairy"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								},
								{
									"key": "category",
									"value": "eggs",
									"disabled": true
								},
								{
									"key": "results",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - negative results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Error message', () => {\r",
									"    const response = pm.response.json();\r",
									"    const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"\r",
									"    pm.expect(response.error).to.be.string(expectedError)//use \"\" for string inside string and string instead of eql for the partial search\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products?category=dairy&results=-1",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "dairy"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								},
								{
									"key": "category",
									"value": "eggs",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Result = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Valiadte env bcs issues is working fine in test env only not Prod\r",
									"if (pm.environment.name === \"Testing\") {\r",
									"    pm.test('Status code is 400 Bad Request', () => {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"\r",
									"    pm.test('Error message', () => {\r",
									"        const response = pm.response.json();\r",
									"        const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"\r",
									"        pm.expect(response.error).to.be.string(expectedError);//use \"\" for string inside string and string instead of eql for the partial search\r",
									"    });\r",
									"} else {\r",
									"    pm.test('Issue fixed in Testing env', () => {\r",
									"        const response = pm.response.json();\r",
									"        const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"\r",
									"        pm.expect(response.error).to.be.string(expectedError);\r",
									"    });\r",
									"    console.log(\"Parameter should not accept 0. This issue is fixed in the Testing environment, please switch the environment accordingly.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{groceryURL}}/products?category=dairy&available=true&results=0",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "dairy"
								},
								{
									"key": "available",
									"value": "true"
								},
								{
									"key": "results",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Boundary Testing"
		},
		{
			"name": "Generate Token",
			"item": [
				{
					"name": "Register a new API client",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman on Valentin's computer\",\r\n   \"clientEmail\": \"valent1inq@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{groceryURL}}/api-clients",
							"host": [
								"{{groceryURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}